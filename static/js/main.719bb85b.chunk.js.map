{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","helper/api.js","App.jsx","index.js"],"names":["TodoList","todos","selectUser","filterByTitle","filterByCompleted","className","type","onChange","event","target","value","map","todo","key","id","completed","checked","readOnly","title","onClick","userId","CurrentUser","name","email","phone","onClear","defaultProps","getTodos","fetch","then","response","json","result","data","getUser","App","state","todosFromServer","preparedTodos","selectedUserId","selectedUser","componentDidMount","a","validTodos","filter","setState","componentDidUpdate","user","query","includes","status","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.719bb85b.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  filterByTitle,\n  filterByCompleted,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <input\n        type=\"text\"\n        onChange={event => filterByTitle(event.target.value)}\n      />\n      <select onChange={event => filterByCompleted(event.target.value)}>\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'\n            }\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  filterByCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ id, name, email, phone, onClear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        {id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{name}</h3>\n    <p className=\"CurrentUser__email\">{email}</p>\n    <p className=\"CurrentUser__phone\">{phone}</p>\n    <button\n      className=\"CurrentUser__clear\"\n      type=\"button\"\n      onClick={onClear}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  email: PropTypes.string,\n  phone: PropTypes.string,\n  onClear: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  id: 0,\n  name: '',\n  email: '',\n  phone: '',\n};\n","const API_TODOS_URL = `https://mate-api.herokuapp.com/todos`;\nconst API_USERS_URL = `https://mate-api.herokuapp.com/users`;\n\nexport const getTodos = () => (\n  fetch(API_TODOS_URL)\n    .then(response => response.json())\n    .then(result => result.data)\n);\n\nexport const getUser = userId => fetch(`${API_USERS_URL}/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUser } from './helper/api';\n\nclass App extends React.Component {\n  state = {\n    todosFromServer: [],\n    preparedTodos: [],\n    selectedUserId: 0,\n    selectedUser: [],\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n    const validTodos = todos.filter(todo => todo.userId);\n\n    this.setState({\n      todosFromServer: validTodos,\n      preparedTodos: validTodos,\n    });\n  };\n\n  componentDidUpdate = () => {\n    const { selectedUser, selectedUserId } = this.state;\n\n    if (selectedUserId !== 0\n      && selectedUserId !== selectedUser.id\n      && selectedUserId) {\n      getUser(selectedUserId)\n        .then((user) => {\n          if (user) {\n            this.setState({ selectedUser: user });\n          } else {\n            this.setState({ selectedUser: {\n              id: '',\n              name: 'No user',\n            } });\n          }\n        });\n    }\n  }\n\n  selectUser = id => this.setState({ selectedUserId: id });\n\n  onClear = () => {\n    this.setState({\n      selectedUser: [],\n      selectedUserId: 0,\n    });\n  }\n\n  filterByTitle = (query) => {\n    this.setState(state => ({\n      preparedTodos: state.todosFromServer.filter(todo => (todo.title\n        ? todo.title.includes(query)\n        : '')),\n    }));\n  }\n\n  filterByCompleted = (status) => {\n    this.setState(state => ({\n      preparedTodos: state.todosFromServer.filter((todo) => {\n        switch (status) {\n          case 'completed':\n            return todo.completed;\n          case 'active':\n            return !todo.completed;\n          default:\n            return todo;\n        }\n      }),\n    }));\n  }\n\n  render() {\n    const { preparedTodos, selectedUserId, selectedUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            filterByTitle={this.filterByTitle}\n            filterByCompleted={this.filterByCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId && selectedUser ? (\n              <CurrentUser\n                onClear={this.onClear}\n                {...selectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}